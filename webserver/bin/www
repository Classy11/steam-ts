#!/usr/bin/env node

module.exports = function (webserverPort, sessionSecret, useHttps) {

  /**
   * Module dependencies.
   */

  var app = require('../app');
  var debug = require('debug')('webserver:server');
  var http = require('http');
  var https = require('https');
  var path = require('path');
  var fs = require('fs');

  var configjson = JSON.parse(fs.readFileSync(path.join(__dirname, '../', '../', "config.json")));

  /**
   * Get port from environment and store in Express.
   */

  var port = normalizePort(webserverPort);
  app.set('port', port);


  /**
   * Create HTTP server.
   */

  if (useHttps) {
    var options = {
      key: fs.readFileSync(configjson.main.ssl_key || path.join(__dirname, '../server.key')),
      cert: fs.readFileSync(configjson.main.ssl_cert || path.join(__dirname, '../server.crt')),
    };
    var server = https.createServer(options, app);
  } else {
    var server = http.createServer(app);
  }

  //  Edited for socket.io
  var sharedsession = require("express-socket.io-session");
  var session = require('express-session');

  var io = require('socket.io')(server, {maxHttpBufferSize: 2097152});
  var sessionSecret = configjson.doNotEdit.sessionSecret;

  var FileStore = require('session-file-store')(session);

  var sessionsettings = session({
      secret: sessionSecret,
      resave: true,
      saveUninitialized: true,
      unset: 'destroy',
      store: new FileStore({path: path.join(__dirname, '../', '/sessions'), ttl: 86400000})
  });

  io.use(sharedsession(sessionsettings, {
    autoSave: true
  }));
  require("./" + path.join("../", "lib", "socketio.js"))(io);
  //  socket.io ended.

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);

  /**
   * Normalize a port into a number, string, or false.
   */

  function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      // port number
      return port;
    }

    return false;
  }

  /**
   * Event listener for HTTP server "error" event.
   */

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind);
  }

}
